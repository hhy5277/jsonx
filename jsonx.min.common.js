module.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var u=e[n]={i:n,l:!1,exports:{}};return t[n].call(u.exports,u,u.exports,r),u.l=!0,u.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var u in t)r.d(n,u,function(e){return t[e]}.bind(null,u));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e){const r={'"':"quote","'":"quote",",":"comma",":":"colon","{":"nest","[":"nest","(":"nest"},n={"{":"}","[":"]","(":")"},u=t=>t in r?r[t]:"plain",o=(t,e)=>{let r=t.substr(0,e+1).split("\n");return[r.length,r.pop().length]},s=(t,e,r,n={})=>{let o=u(t[e]),s=t.substr(e,r);switch(o){case"quote":s=s.substr(1,s.length-2);break;case"plain":s=(t=>t.replace(/^\s+|\s+$/g,""))(s)}return{status:o,text:s,...n}},l=t=>{switch(t.status){case"plain":return JSON.parse(t.text);case"nest":return t.left in a?a[t.left](t):t.text;default:return t.text}},i={quote:(t,e,r)=>{let n,u=e,l=t.length,i=t[u++];for(;u<l;u++)if("\\"===(n=t[u]))u+=1;else if(n===i)return r.push(s(t,e,u-e+1,{quote:i})),u;let[a,f]=o(t,e);throw`Quote is not closed. [${i}] at Ln ${a} Col ${f}`},nest:(t,e,r)=>{let l,a,f=e,c=t[f++],p=n[c],b=f,h=[];for(;f<t.length;f++)if(l=t[f],(a=u(l))in i)f>b&&h.push(s(t,b,f-b)),b=(f=i[a](t,f,h))+1;else if(l===p)return f>b&&h.push(s(t,b,f-b)),h=h.filter(t=>"plain"!==t.status||!/^\s*$/.test(t.text)),r.push(s(t,e,f-e+1,{left:c,sub:h})),f;let[d,m]=o(t,e);throw`Nest is not closed. "${c}" at Ln ${d} Col ${m}`},comma:(t,e,r)=>(r.push(s(t,e,1)),e),colon:(t,e,r)=>(r.push(s(t,e,1)),e)},a={"[":t=>t.sub.filter(t=>"comma"!==t.status).map(t=>l(t)),"{":t=>{let e={},r=0,n=t.sub.filter(t=>"comma"!==t.status),u=3*Math.floor(n.length/3);for(;r<u;r+=3){if("colon"!==n[r+1].status)return e;e[n[r+0].text]=l(n[r+2])}return e}};t.exports={parse:t=>{let e,[r,n]=((t,e=0,r=[])=>{let n=e,o=t.length;for(;e<o;e++){let o=t[e],l=u(o);if(l in i){if(n<e&&r.push(s(t,n,e-n)),(e=i[l](t,e,r))<0)return r;n=e+1}}return n<e&&r.push(s(t,n,e-n)),r})(t);return e=n&&"nest"===n.status&&"plain"===r.status?n.sub[0]:r,l(e)}}}]);